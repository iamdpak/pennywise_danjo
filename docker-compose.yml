services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django-web-dev
    # Pick up envs from a file if you have one at project root
    env_file:
      - .env
    environment:
      # Safe defaults if .env is absent; change "your_project" to your Django settings module
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-pennywise_api.settings}
      DEBUG: ${DEBUG:-1}

      # DB connection that matches the 'db' service
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-postgres}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}

      # Redis URLs used by Celery (optional)
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      SECRET_KEY: dev-secret-change-me               # <â€” add this
    volumes:
      # Mount your source for live reload
      - .:/app:cached
    ports:
      - "8000:8000"
      - "5678:5678"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    # Run the dev server under debugpy so VS Code can attach
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "manage.py", "runserver", "0.0.0.0:8000"]

  cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django-cli
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-pennywise_api.settings}
      DEBUG: ${DEBUG:-1}
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-postgres}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      SECRET_KEY: dev-secret-change-me
    volumes:
      - .:/app:cached
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    stdin_open: true
    tty: true
    # Keep the container idle so you can exec or override commands as needed
    command: ["sleep", "infinity"]

  db:
    image: postgres:16
    container_name: postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    ports:
      # Use 5433 on host to avoid clashing with a local Postgres
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"

  # --- Optional Celery worker in dev (uncomment if you use Celery) ---
  # worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: celery-worker-dev
  #   env_file: [.env]
  #   environment:
  #     DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-your_project.settings}
  #   command: bash -lc "until nc -z db 5432; do sleep 1; done && celery -A your_project.celery:app worker -l info"
  #   volumes:
  #     - .:/app:cached
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioaccess
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # one-time init to create a bucket (optional but handy)
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set local http://minio:9000 minioaccess miniosecret; do sleep 2; done;
      /usr/bin/mc mb -p local/receipts || true;
      /usr/bin/mc anonymous set download local/receipts || true;
      "
    restart: "no"

volumes:
  pgdata: {}
  minio_data:
